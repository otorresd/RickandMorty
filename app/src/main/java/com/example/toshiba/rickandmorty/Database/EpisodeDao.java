package com.example.toshiba.rickandmorty.Database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPISODE".
*/
public class EpisodeDao extends AbstractDao<Episode, Long> {

    public static final String TABLENAME = "EPISODE";

    /**
     * Properties of entity Episode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EpisodeId = new Property(0, Long.class, "episodeId", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
    }

    private Query<Episode> character_EpisodeQuery;

    public EpisodeDao(DaoConfig config) {
        super(config);
    }
    
    public EpisodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPISODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: episodeId
                "\"URL\" TEXT UNIQUE );"); // 1: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPISODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Episode entity) {
        stmt.clearBindings();
 
        Long episodeId = entity.getEpisodeId();
        if (episodeId != null) {
            stmt.bindLong(1, episodeId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Episode entity) {
        stmt.clearBindings();
 
        Long episodeId = entity.getEpisodeId();
        if (episodeId != null) {
            stmt.bindLong(1, episodeId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Episode readEntity(Cursor cursor, int offset) {
        Episode entity = new Episode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // episodeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Episode entity, int offset) {
        entity.setEpisodeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Episode entity, long rowId) {
        entity.setEpisodeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Episode entity) {
        if(entity != null) {
            return entity.getEpisodeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Episode entity) {
        return entity.getEpisodeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "episode" to-many relationship of Character. */
    public List<Episode> _queryCharacter_Episode(Long characterId) {
        synchronized (this) {
            if (character_EpisodeQuery == null) {
                QueryBuilder<Episode> queryBuilder = queryBuilder();
                queryBuilder.join(JoinCharacterWithEpisodes.class, JoinCharacterWithEpisodesDao.Properties.EpisodeId)
                    .where(JoinCharacterWithEpisodesDao.Properties.CharacterId.eq(characterId));
                character_EpisodeQuery = queryBuilder.build();
            }
        }
        Query<Episode> query = character_EpisodeQuery.forCurrentThread();
        query.setParameter(0, characterId);
        return query.list();
    }

}
