package com.example.toshiba.rickandmorty.Database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARACTER".
*/
public class CharacterDao extends AbstractDao<Character, Long> {

    public static final String TABLENAME = "CHARACTER";

    /**
     * Properties of entity Character.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property Species = new Property(3, String.class, "species", false, "SPECIES");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property OriginId = new Property(6, long.class, "originId", false, "ORIGIN_ID");
        public final static Property LocationId = new Property(7, long.class, "locationId", false, "LOCATION_ID");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property Url = new Property(9, String.class, "url", false, "URL");
        public final static Property Created = new Property(10, String.class, "created", false, "CREATED");
    }

    private DaoSession daoSession;


    public CharacterDao(DaoConfig config) {
        super(config);
    }
    
    public CharacterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARACTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"STATUS\" TEXT," + // 2: status
                "\"SPECIES\" TEXT," + // 3: species
                "\"TYPE\" TEXT," + // 4: type
                "\"GENDER\" TEXT," + // 5: gender
                "\"ORIGIN_ID\" INTEGER NOT NULL ," + // 6: originId
                "\"LOCATION_ID\" INTEGER NOT NULL ," + // 7: locationId
                "\"IMAGE\" TEXT," + // 8: image
                "\"URL\" TEXT UNIQUE ," + // 9: url
                "\"CREATED\" TEXT);"); // 10: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARACTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        String species = entity.getSpecies();
        if (species != null) {
            stmt.bindString(4, species);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
        stmt.bindLong(7, entity.getOriginId());
        stmt.bindLong(8, entity.getLocationId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(11, created);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        String species = entity.getSpecies();
        if (species != null) {
            stmt.bindString(4, species);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
        stmt.bindLong(7, entity.getOriginId());
        stmt.bindLong(8, entity.getLocationId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(11, created);
        }
    }

    @Override
    protected final void attachEntity(Character entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Character readEntity(Cursor cursor, int offset) {
        Character entity = new Character( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // species
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.getLong(offset + 6), // originId
            cursor.getLong(offset + 7), // locationId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // created
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Character entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpecies(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOriginId(cursor.getLong(offset + 6));
        entity.setLocationId(cursor.getLong(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreated(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Character entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Character entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Character entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOriginDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLocationDao().getAllColumns());
            builder.append(" FROM CHARACTER T");
            builder.append(" LEFT JOIN ORIGIN T0 ON T.\"ORIGIN_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN LOCATION T1 ON T.\"LOCATION_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Character loadCurrentDeep(Cursor cursor, boolean lock) {
        Character entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Origin origin = loadCurrentOther(daoSession.getOriginDao(), cursor, offset);
         if(origin != null) {
            entity.setOrigin(origin);
        }
        offset += daoSession.getOriginDao().getAllColumns().length;

        Location location = loadCurrentOther(daoSession.getLocationDao(), cursor, offset);
         if(location != null) {
            entity.setLocation(location);
        }

        return entity;    
    }

    public Character loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Character> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Character> list = new ArrayList<Character>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Character> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Character> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
